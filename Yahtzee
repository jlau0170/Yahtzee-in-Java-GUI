//Justin Lau
//Ryan Park
//Period 3 Comp Sci AP
//This program is a simulation of the Milton Bradley Yahtzee game, two players.
//**NOTE** When selecting the dice, you select the ones that you wish to discard.
import java.awt.Rectangle;
import javax.swing.JOptionPane;
import java.awt.Event;
import java.awt.Color;
import java.awt.Component;
import java.awt.Graphics;
import java.awt.Font;
import java.awt.FontMetrics;
public class Yahtzee extends java.applet.Applet
{
    private static final Component frame = null; //helps build the dialog
    int totalWidth, totalHeight;// dimensions of board
    int fontSize; //font sizes
    int dieSize;
    int circSize;    // die and pip sizes
    int rollNum;    // roll number
    Die dice[] = new Die[5]; //five die
    BigButton rollBar, newGameBar; //roll bar and newGame bar
    ScoreGroup scores[] = new ScoreGroup[14]; //scoregroups for players 1 and 2
    ScoreGroup scores2[] = new ScoreGroup[14];
    Font scoreFont, labelFont, rbFont, ngFont, messageFont; //fonts
    FontMetrics fm;    // metrics for labels
    int paintFlags;    // signal what and when to repaint
    int PaintScore = 1;
    int PaintLabel = 3;
    int PaintDice = 1;
    int PaintRoll = 14;
    int PaintMessage = 55;
    int PaintTotal = 112;
    int PaintNGBar = 28;
    int PaintALL = 32767; //paintALL
    int underMouse = 99;    // which score group the mouse is now in
    int diceSelected;    // how many dice are currently highlighted
    int bonus;    // number of bonus chips earned so far
    int filledGroups;    // how many of the 13 score groups have been filled
    int filledGroups2;
    int topSection;    // current +- running tab for top section bonus
    int topSection2;
    int player = 1; //player
    public void init() {
        //default title and icon
        JOptionPane.showMessageDialog(frame,
            "This game will be two players.");
    Die d;
    setBackground(Color.LIGHT_GRAY); //background color
   
    // initialize dimensions of different features


    totalWidth = Math.min(2*(size().width), 2*(size().height)+5);


    totalHeight = totalWidth;    // forces game to be square


   
    dieSize = totalWidth / 6;


    circSize = dieSize / 5;


    fontSize = totalHeight/16;


    scoreFont = new Font("Helvetica", Font.BOLD, fontSize); //types of fonts


    labelFont = new Font("TimesRoman", Font.BOLD, fontSize);


    rbFont = new Font("TimesRoman", Font.PLAIN, dieSize / 2);


    ngFont = new Font("TimesRoman", Font.PLAIN, fontSize);


    messageFont = new Font("TimesRoman", Font.PLAIN, fontSize);


    fm = getFontMetrics(labelFont);





    // initialize dice


    for (int i=0; i<5; i++) {


    d = new Die(this, i);


    dice[i] = d;

    }





    // initialize rollbar (the "button" to roll the dice)


    rollBar = new BigButton(this, totalWidth / 2 + 15, dieSize * 3 / 2,


    totalWidth / 3 + 35, dieSize);





    // initialize the New Game button


    newGameBar = new BigButton(this, totalWidth * 2 / 3, totalHeight * 2 / 3,


    totalWidth / 5 + 37, dieSize * 2 / 3);





    // initialize score boxes

    scores[0] = new ScoreGroup(this, 0, 0, "1's");
    scores[1] = new ScoreGroup(this, 1, 0, "2's");
    scores[2] = new ScoreGroup(this, 2, 0, "3's");
    scores[3] = new ScoreGroup(this, 3, 0, "4's");
    scores[4] = new ScoreGroup(this, 4, 0, "5's");
    scores[5] = new ScoreGroup(this, 5, 0, "6's");
    scores[6] = new ScoreGroup(this, 6, 0, "3 of a kind");
    scores[7] = new ScoreGroup(this, 7, 0, "4 of a kind");
    scores[8] = new ScoreGroup(this, 8, 0, "Full house");
    scores[9] = new ScoreGroup(this, 9, 0, "Sm straight");
    scores[10] = new ScoreGroup(this, 10, 0, "Lg straight");
    scores[11] = new ScoreGroup(this, 11, 0, "Yahtzee");
    scores[12] = new ScoreGroup(this, 12, 0, "Chance");
    scores[13] = new ScoreGroup(this, 13, 0, "Grand Total");
   
    scores2[0] = new ScoreGroup(this, 0, 280, "1's");
    scores2[1] = new ScoreGroup(this, 1, 280, "2's");
    scores2[2] = new ScoreGroup(this, 2, 280, "3's");
    scores2[3] = new ScoreGroup(this, 3, 280, "4's");
    scores2[4] = new ScoreGroup(this, 4, 280, "5's");
    scores2[5] = new ScoreGroup(this, 5, 280, "6's");
    scores2[6] = new ScoreGroup(this, 6, 280, "3 of a kind");
    scores2[7] = new ScoreGroup(this, 7, 280, "4 of a kind");
    scores2[8] = new ScoreGroup(this, 8, 280, "Full house");
    scores2[9] = new ScoreGroup(this, 9, 280, "Sm straight");
    scores2[10] = new ScoreGroup(this, 10, 280, "Lg straight");
    scores2[11] = new ScoreGroup(this, 11, 280, "Yahtzee");
    scores2[12] = new ScoreGroup(this, 12, 280, "Chance");
    scores2[13] = new ScoreGroup(this, 13, 280, "Grand Total");

    setSize(totalWidth+100, totalHeight+105);
   
    newGame();


    }





    void newGame() {    // initialize all values for a new game

    int i;
    player = 1;
    rollNum = 1;

    for (i = 0; i < 5; i++){

    dice[i].zeroDie();
   
    }


    for (i = 0; i < 13; i++){


    scores[i].zeroScore();
    scores2[i].zeroScore();
    }

    rollBar.zeroBB();


    newGameBar.zeroBB();


    diceSelected = 5;


    bonus = 0;


    filledGroups = 0;
    filledGroups2 = 0;


    topSection = 0;
    topSection2 = 0;

    paintFlags = PaintALL;
    }


    public void update(Graphics g) {


    paint(g);


    }





    public void paint(Graphics g) {


    Die d;


    ScoreGroup s;
    ScoreGroup s2;


    int i;


    String t1, t2, t3 = null;



    // dice


    if ((paintFlags & PaintDice) != 0) {


     for (i = 0; i < 5; i++)


     {


       d = dice[i];


       if (!d.noPaint) {


    if (d.selected)


    g.setColor(Color.gray);


    else


    g.setColor(Color.white);


    g.fillRoundRect(d.x, d.y, d.width, d.height, 5, 5);    // die surface


    g.setColor(Color.black);


    if (d.value > 0) {    // draw the pips


    int center = (dieSize - circSize) / 2;


    int corner = (circSize / 2);


    int farcorner = dieSize - (3 * circSize / 2);


    if (d.value % 2 == 1) {    // odd #'s have center pip


    g.fillOval(d.x + center, d.y + center, circSize, circSize);


    }


    if (d.value > 1) {    // 2-6 have top-left and bottom-right corner pips


    g.fillOval(d.x + corner, d.y + corner, circSize, circSize);


    g.fillOval(d.x + farcorner, d.y + farcorner, circSize, circSize);


    }


    if (d.value > 3) {    // 4-6 have top-right and bottom-left corner pips


    g.fillOval(d.x + farcorner, d.y + corner, circSize, circSize);


    g.fillOval(d.x + corner, d.y + farcorner, circSize, circSize);


    }


    if (d.value == 6) {    // 6 has center-left and center-right pips


    g.fillOval(d.x + corner, d.y + center, circSize, circSize);


    g.fillOval(d.x + farcorner, d.y + center, circSize, circSize);


    }


    }


       }


       d.noPaint = false;


     }


    }





    // rollbar


    if ((paintFlags & PaintRoll) != 0) {


       if (rollBar.active) {


    g.setColor(Color.cyan);


    g.fill3DRect(rollBar.x, rollBar.y, rollBar.width, rollBar.height, rollBar.raised);
   
    g.setColor(Color.black);
    g.draw3DRect(rollBar.x, rollBar.y, rollBar.width, rollBar.height, rollBar.raised);


       } else {


    g.setColor(Color.lightGray);


    g.fill3DRect(rollBar.x, rollBar.y, rollBar.width, rollBar.height, true);
   
    g.setColor(Color.black);
    g.draw3DRect(rollBar.x, rollBar.y, rollBar.width, rollBar.height, rollBar.raised);


       }


       if (rollNum < 4) {


    g.setColor(Color.black);


    g.setFont(rbFont);


    g.drawString("P" + player + ": Roll " + rollNum, rollBar.x + (rollBar.width / 7),


    rollBar.y + (rollBar.height * 2 / 3));


       }


    }





    // new-game bar


    if ((paintFlags & PaintNGBar) != 0) {


    g.setColor(Color.white);


    g.fill3DRect(newGameBar.x-3, newGameBar.y, newGameBar.width,


    newGameBar.height, newGameBar.raised);


    g.setColor(Color.black);
    g.draw3DRect(newGameBar.x-3, newGameBar.y, newGameBar.width,


    newGameBar.height, newGameBar.raised);


    g.setFont(ngFont);


    g.drawString("New Game", newGameBar.x + (newGameBar.width / 100),


    newGameBar.y + (fontSize * 3 / 2));


    }





    // score boxes and their labels


    if ((paintFlags & PaintLabel) != 0) {


       g.setFont(labelFont);


       g.setColor(Color.blue);


       for (i = 0; i < 13; i++)
       {
           g.drawString(scores[i].name, scores[i].x - fm.stringWidth(scores[i].name) - 5,scores[i].y + fontSize);
           g.drawString(scores2[i].name, scores[i].x - fm.stringWidth(scores2[i].name) - 5,scores[i].y + fontSize);
       }

    }


    if ((paintFlags & PaintScore) != 0) {


    g.setFont(scoreFont);


    for (i = 0; i < 13; i++)


    {


       s = scores[i];
       s2 = scores2[i];


       if (!s.noPaint || !s2.noPaint) {


    g.setColor(Color.white);


    g.fillRect(s.x, s.y, s.width, s.height);
    g.fillRect(s2.x, s2.y, s2.width, s2.height);


       g.setColor(Color.black);


    if (s.filled)
    {
    g.drawString(String.valueOf(s.value), s.x + 1, s.y + fontSize);
    }
   
    if (s2.filled)
    {
    g.drawString(String.valueOf(s2.value), s2.x + 1, s2.y + fontSize);
    }

    else if (i == underMouse) { //if under mouse


       g.setColor(Color.cyan);

       if (player == 1)
           g.drawString(String.valueOf(s.value), s.x + 1, s.y + fontSize);
       else if (player == 2)
           g.drawString(String.valueOf(s2.value), s2.x + 1, s2.y + fontSize);


    }


       }


       s.noPaint = false;
       s2.noPaint = false;

    }


    }





    // grand total score box


    if ((paintFlags & PaintTotal) != 0)
    {


    if (filledGroups == 13 && filledGroups2 == 13)
    {    // game over


    s = scores[13];
    s2 = scores2[13];


    g.setColor(getBackground());


    g.fillRect(0, scores[2].y, scores[0].x - scores[0].width, scores[0].height * 3);
    g.fillRect(0, scores2[2].y, scores2[0].x - scores2[0].width, scores2[0].height * 3);


    g.setColor(Color.white);


    g.fillRect(s.x, s.y, s.width, s.height);
    g.fillRect(s2.x, s2.y, s2.width, s2.height);


    g.setFont(labelFont);


    g.setColor(Color.black);


    g.drawString(s.name, s.x - fm.stringWidth(s.name) - 5, s.y + fontSize);
    g.drawString(s2.name, s.x - fm.stringWidth(s.name) - 5, s.y + fontSize);


    g.setFont(scoreFont);


    g.drawString(String.valueOf(s.value), s.x + 1, s.y + fontSize);
    g.drawString(String.valueOf(s2.value), s2.x + 1, s2.y + fontSize);
    }
    else {    // clear it


    g.setColor(getBackground());


    g.fillRect(0, scores[13].y, scores[13].x + scores[13].width + 1,


    scores[13].height + 1);

    g.fillRect(0, scores2[13].y, scores2[13].x + scores2[13].width + 1,


    scores2[13].height + 1);
    }

    }

    // a brief instructional message


    if ((paintFlags & PaintMessage) != 0) {


    g.setColor(getBackground());


    g.fillRect(totalWidth / 2, rollBar.y + rollBar.height + 1,


    totalWidth / 2 + 20, dieSize);


    g.setColor(Color.black);


    g.setFont(messageFont);


    if (filledGroups == 13 && filledGroups2 == 13) {


    t1 = "Who Won??";


    t2 = "";


    } else if (rollNum == 1) {


    t1 = "Click the Roll bar";


    t2 = "  to roll the dice";


    } else if (rollNum == 4) {


    t1 = "Select a score box";


    t2 = "";


    } else {


    t1 = "Select a score box,";


    t2 = "    or reroll";
   


    }


    g.drawString(t1, totalWidth / 2, rollBar.y + rollBar.height + fontSize + 10);


    g.drawString(t2, totalWidth / 2, rollBar.y + rollBar.height + (2 * fontSize) + 10);



    }
   
    paintFlags = PaintALL;    // reset


    }





    public boolean mouseDown (Event evt, int x, int y) { //mouse events


    Die d;





    // if on a die, select or deselect it; if on the bar, depress it; else ignore


    if (rollNum > 1 && rollNum < 4)


       for (int i = 0; i < 5; i++) {


    d = dice[i];


    if (d.inside(x, y)) {


    paintFlags = PaintDice;


    if (d.selected) {


    diceSelected--;


    d.selected = false;


    if (diceSelected == 0) {


    rollBar.active = false;


    paintFlags |= PaintRoll;


    }


    } else {


    diceSelected++;


    d.selected = true;


    rollBar.active = true;


    if (diceSelected == 1)


    paintFlags |= PaintRoll;


    }


    for (int j = 0; j < 5; j++)


    if (i != j)


    dice[j].noPaint = true;


    repaint();


    return true;


    }


       }


   


    if (rollBar.inside(x, y) && rollBar.active) {


    rollBar.raised = false;


    paintFlags = PaintRoll;


    repaint();


    return true;


    }





    if (newGameBar.inside(x, y)) {


    newGameBar.raised = false;


    paintFlags = PaintNGBar;


    repaint();


    return true;


    }





    return(false);


    }





    public boolean mouseUp (Event evt, int x, int y) { //mouse events





    // if on depressed bar, roll


    if (!rollBar.raised && rollBar.inside(x, y)) {


    rollBar.raised = true;
    roll();


    paintFlags = PaintDice | PaintRoll | PaintMessage;


    repaint();


    return true;


    }





    // if the user wants a new game, reinitialize


    if (!newGameBar.raised && newGameBar.inside(x, y)) {


    newGame();


    paintFlags = PaintALL;


    repaint();


    return true;


    }





    // if on a valid scoregroup, select and record the score


    if (underMouse != 99 && scores[underMouse].inside(x, y) && player == 1) {


    paintFlags = PaintScore | PaintDice | PaintRoll | PaintMessage;


    if (scores[11].filled && scores[11].value == 50 &&    // detect bonus chip earned


       dice[0].value == dice[1].value && dice[1].value == dice[2].value &&


       dice[2].value == dice[3].value && dice[3].value == dice[4].value) {


    bonus++;


    }


    scores[underMouse].filled = true;


    if (underMouse < 6) {    // adjust top section indicator


    topSection += (scores[underMouse].value) - (3 * (underMouse + 1));




    }


    underMouse = 99;


    rollBar.raised = true;


    if (++filledGroups == 13) {    // game over


    int t = bonus * 100;    // bonus chips


    for (int i = 0; i < 13; i++)


    t += scores[i].value;    // basic score


    if (topSection >= 0)


    t += 35;    // top bonus


    scores[13].value = t;
    }


    for (int j = 0; j < 5; j++)


    dice[j].zeroDie();


    diceSelected = 5;


    rollNum = 1;
    player = 2;

    rollBar.active = true;
    repaint();


    return(true);


    }
   
    else if (underMouse != 99 && scores2[underMouse].inside(x, y) && player == 2) {


    paintFlags = PaintScore | PaintDice | PaintRoll | PaintMessage;


    if (scores2[11].filled && scores2[11].value == 50 &&    // detect bonus chip earned


       dice[0].value == dice[1].value && dice[1].value == dice[2].value &&


       dice[2].value == dice[3].value && dice[3].value == dice[4].value) {


    bonus++;


    }


    scores2[underMouse].filled = true;


    if (underMouse < 6) {    // adjust top section indicator


    topSection2 += (scores2[underMouse].value) - (3 * (underMouse + 1));




    }


    underMouse = 99;


    rollBar.raised = true;


    if (++filledGroups2 == 13) {    // game over


    int t2 = bonus * 100;    // bonus chips


    for (int i = 0; i < 13; i++)


    t2 += scores2[i].value;    // basic score


    if (topSection2 >= 0)


    t2 += 35;    // top bonus


    scores2[13].value = t2;


    rollNum = 4;


    rollBar.active = false;


    paintFlags |= PaintTotal;
   


    }
    else {    // reset the dice


    for (int j = 0; j < 5; j++)


    dice[j].zeroDie();


    diceSelected = 5;


    rollNum = 1;
    player = 1;

    rollBar.active = true;


    }


    repaint();


    return(true);


    }





    // if bar had been de-pressed; cancel that


    if (!rollBar.raised) {


    rollBar.raised = true;


    paintFlags = PaintRoll;


    repaint();


    return(true);


    }


    if (!newGameBar.raised) {


    newGameBar.raised = true;


    paintFlags = PaintNGBar;


    repaint();


    return(true);


    }





    return(false);


    }





    public boolean mouseMove (Event evt, int x, int y) { //mouse events


    // if we move over a score box we can fill, highlight it


    ScoreGroup s, s2;


    int newUnder = 99, i;





    if (rollNum != 1) {


    for (i = 0; i < 13; i++) {


    s = scores[i];
    s2 = scores2[i];


    if (s.inside(x, y) && !s.filled && player == 1) {


    newUnder = i;


    if (i != underMouse)


    s.calc(i, player);


    break;


    }
   
    else if (s2.inside(x, y) && !s2.filled && player == 2) {


    newUnder = i;


    if (i != underMouse)


    s2.calc(i,player);


    break;


    }


    }


    if (newUnder != underMouse && player == 1) {


    for (i = 0; i < 13; i++)


    scores[i].noPaint = true;


    if (underMouse != 99)


    scores[underMouse].noPaint = false;


    if (newUnder != 99)


    scores[newUnder].noPaint = false;


    underMouse = newUnder;


    paintFlags = PaintScore;


    repaint();


    return true;


    }
   
    else if (newUnder != underMouse && player == 2) {


    for (i = 0; i < 13; i++)


    scores2[i].noPaint = true;


    if (underMouse != 99)


    scores2[underMouse].noPaint = false;


    if (newUnder != 99)


    scores2[newUnder].noPaint = false;


    underMouse = newUnder;


    paintFlags = PaintScore;


    repaint();


    return true;


    }


    }


    return(false);


    }





    // roll the selected dice


    void roll() {


    for (int i = 0; i < 5;     i++)


       if (dice[i].selected) {


    dice[i].value = 1 + (int)Math.floor(Math.random() * 6);


    if (dice[i].value > 6)    // shouldn't happen, but just in case


    dice[i].value = 6;


    dice[i].selected = false;


       }


       else


    dice[i].noPaint = true;


    diceSelected = 0;


    rollBar.active = false;


    rollNum++;


    }


}








class Die extends Rectangle { //die class


    Yahtzee parent;


    boolean selected;


    boolean noPaint;


    int value;





    Die(Yahtzee target, int offset) {


    int gap = target.dieSize / 6;





    parent = target;


    width = height = parent.dieSize;


    x = (offset * (gap + width)) + gap;


    y = gap;


    }





    void zeroDie() {


    value = 0;


    selected = true;


    noPaint = false;


    }


}





class BigButton extends Rectangle { //big button class


    Yahtzee parent;


    boolean raised;


    boolean active;


    boolean noPaint;





    BigButton(Yahtzee target, int x, int y, int w, int h) {


    super(x, y, w, h);


    parent = target;


    }





    void zeroBB() {


    raised = true;


    active = true;


    noPaint = false;


    }


}





class ScoreGroup extends Rectangle { //scoregroup class


    Yahtzee parent;


    int value;


    boolean filled;


    boolean noPaint;


    String name;





    ScoreGroup(Yahtzee target, int offset, int pos, String text) {


    x = target.fontSize * 6 + pos;


    y = target.dieSize + ((target.fontSize + 4) * (offset + 1));


    width = target.fontSize * 2;


    height = target.fontSize + 2;


    parent = target;


    name = text;


    }





    void zeroScore() {


    value = 0;


    filled = false;


    noPaint = false;


    }





    void calc(int groupNum , int player) { //calculations


    // calculate the score for this group


    int i, j, points = 0, consec = 0, total = 0;


    int totals[] = new int[7];


    boolean yahtzee = false, joker = false, fh;





    for (i = 0; i < 5; i++) {


    j = parent.dice[i].value;


    total += j;


    totals[j] += 1;


    if (totals[j] == 5) {


    yahtzee = true;


    if (parent.scores[11].filled && parent.scores[j-1].filled)


    joker = true;    // joker condition


    }


    }





    if (groupNum < 6)    // 1's, 2's, etc.


    points = (groupNum + 1) * totals[groupNum + 1];


    else if (groupNum == 6 || groupNum == 7) {    // 3 or 4 of a kind


    for (j = 1; j < 7; j++)


    if (totals[j] > (groupNum - 4))


    points = total;


    }


    else if (groupNum == 8) {    // full house


    if (joker)


    points = 25;


    else {


    fh = true;


    for (j = 1; j < 7; j++)


    if (totals[j] == 1 || totals[j] == 4


       || totals[j] == 5)


    fh = false;


    points = fh ? 25 : 0;


    }


    }


    else if (groupNum == 9 || groupNum == 10) {    // small or large straight


    if (joker)


    points = groupNum == 9 ? 30 : 40;


    else {


    for (j = 1; j < 7; j++) {


    if (totals[j] > 0)


    consec++;


    else


    consec = 0;


    if (consec > (groupNum - 6)) {


    points = groupNum == 9 ? 30 : 40;


    break;


    }


    }


    }


    }   


    else if (groupNum == 11)    // Yahtzee


    points = yahtzee ? 50 : 0;


    else if (groupNum == 12)    // chance


    points = total;
   
    if (player == 1)
    parent.scores[groupNum].value = points;
    else if (player == 2)
    parent.scores2[groupNum].value = points;

    }


}
